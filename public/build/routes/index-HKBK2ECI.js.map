{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/react-nl2br@1.0.4_react@18.2.0/node_modules/react-nl2br/index.js", "../../../node_modules/.pnpm/remix-typedjson@0.1.7_fh7rng5esma2cylftmg7vzq6cy/node_modules/remix-typedjson/dist/esm/typedjson.js", "../../../node_modules/.pnpm/remix-typedjson@0.1.7_fh7rng5esma2cylftmg7vzq6cy/node_modules/remix-typedjson/dist/esm/remix.js", "../../../node_modules/.pnpm/remix-utils@6.0.0_flygrhgisw2einn4xykxup6yra/node_modules/remix-utils/browser/react/use-event-source.js", "../../../app/routes/index.tsx", "../../../app/components/LoginPane.tsx"],
  "sourcesContent": ["'use strict';\n\nvar jsxRuntime = require('react/jsx-runtime');\nvar _jsx = jsxRuntime.jsx;\nvar newlineRegex = /(\\r\\n|\\r|\\n)/g;\n\nmodule.exports = function(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return str.split(newlineRegex).map(function(line, index) {\n    if (line.match(newlineRegex)) {\n      return _jsx('br', { key: index });\n    }\n    return line;\n  });\n};\n", "function serialize(data) {\n    if (data === null)\n        return { json: 'null' };\n    if (data === undefined)\n        return { json: undefined };\n    const stack = [];\n    const keys = [''];\n    const meta = new Map();\n    function replacer(key, value) {\n        function unwindStack() {\n            while (stack.length > 0) {\n                const top = stack[stack.length - 1];\n                if (top.iteration < top.count) {\n                    top.iteration++;\n                    return top;\n                }\n                if (top.type === 'object') {\n                    keys.pop();\n                }\n                stack.pop();\n            }\n        }\n        let entry = unwindStack();\n        if (entry) {\n            value = entry.value[key];\n        }\n        let metaKey = `${keys[keys.length - 1]}${key}`;\n        const valueType = typeof value;\n        if (valueType === 'object' && value !== null) {\n            let count = 0;\n            let t = 'undefined';\n            if (value instanceof Date) {\n                t = 'date';\n                value = value.toISOString();\n            }\n            else if (value instanceof Set) {\n                value = Array.from(value);\n                count = value.length;\n                t = 'set';\n            }\n            else if (value instanceof Map) {\n                value = Object.fromEntries(value);\n                count = Object.keys(value).length;\n                t = 'map';\n            }\n            else if (value instanceof Array) {\n                t = 'object';\n                count = value.length;\n            }\n            else if (value instanceof RegExp) {\n                t = 'regexp';\n                value = String(value);\n            }\n            else if (value instanceof Error) {\n                t = 'error';\n                value = { name: value.name, message: value.message, stack: value.stack };\n                // push error value to stack\n                stack.push({ type: 'object', value, count: 3, iteration: 0 });\n            }\n            else {\n                count = Object.keys(value).length;\n                t = 'object';\n            }\n            if (t !== 'object') {\n                meta.set(metaKey, t);\n            }\n            if (count !== 0) {\n                stack.push({ type: t, value, count, iteration: 0 });\n                if (key && t === 'object') {\n                    keys.push(`${metaKey}.`);\n                }\n                return value;\n            }\n        }\n        // handle non-object types\n        if (valueType === 'bigint') {\n            meta.set(metaKey, 'bigint');\n            return String(value);\n        }\n        if (valueType === 'number') {\n            if (value === Number.POSITIVE_INFINITY) {\n                meta.set(metaKey, 'infinity');\n                return 'Infinity';\n            }\n            if (value === Number.NEGATIVE_INFINITY) {\n                meta.set(metaKey, '-infinity');\n                return '-Infinity';\n            }\n            if (Number.isNaN(value)) {\n                meta.set(metaKey, 'nan');\n                return 'NaN';\n            }\n        }\n        if (typeof value === 'undefined') {\n            meta.set(metaKey, 'undefined');\n            return null;\n        }\n        return value;\n    }\n    const json = JSON.stringify(data, replacer);\n    return {\n        json,\n        meta: meta.size === 0 ? undefined : Object.fromEntries(meta.entries()),\n    };\n}\nfunction deserialize({ json, meta }) {\n    if (typeof json === 'undefined') {\n        return undefined;\n    }\n    if (!json)\n        return null;\n    const result = JSON.parse(json);\n    if (meta) {\n        applyMeta(result, meta);\n    }\n    return result;\n}\nfunction applyMeta(data, meta) {\n    for (const key of Object.keys(meta)) {\n        applyConversion(data, key.split('.'), meta[key]);\n    }\n    return data;\n    function applyConversion(data, keys, type, depth = 0) {\n        const key = keys[depth];\n        if (depth < keys.length - 1) {\n            applyConversion(data[key], keys, type, depth + 1);\n            return;\n        }\n        const value = data[key];\n        switch (type) {\n            case 'date':\n                data[key] = new Date(value);\n                break;\n            case 'set':\n                data[key] = new Set(value);\n                break;\n            case 'map':\n                data[key] = new Map(Object.entries(value));\n                break;\n            case 'regexp':\n                const match = /^\\/(.*)\\/([dgimsuy]*)$/.exec(value);\n                if (match) {\n                    data[key] = new RegExp(match[1], match[2]);\n                }\n                else {\n                    throw new Error(`Invalid regexp: ${value}`);\n                }\n                break;\n            case 'bigint':\n                data[key] = BigInt(value);\n                break;\n            case 'undefined':\n                data[key] = undefined;\n                break;\n            case 'infinity':\n                data[key] = Number.POSITIVE_INFINITY;\n                break;\n            case '-infinity':\n                data[key] = Number.NEGATIVE_INFINITY;\n                break;\n            case 'nan':\n                data[key] = NaN;\n                break;\n            case 'error':\n                const err = new Error(value.message);\n                err.name = value.name;\n                err.stack = value.stack;\n                data[key] = err;\n                break;\n        }\n    }\n}\nfunction stringify(data, replacer, space) {\n    if (replacer || space) {\n        const { json, meta } = serialize(data);\n        const jsonObj = deserialize({ json });\n        return JSON.stringify({\n            json: jsonObj,\n            meta,\n        }, replacer, space);\n    }\n    return JSON.stringify(serialize(data));\n}\nfunction parse(json) {\n    const result = JSON.parse(json);\n    return result ? deserialize(result) : null;\n}\nconst typedjson = {\n    serialize,\n    stringify,\n    deserialize,\n    parse,\n    applyMeta,\n};\nexport { serialize, deserialize, stringify, parse, applyMeta };\nexport default typedjson;\n", "import { useActionData, useFetcher, useLoaderData, useMatches, } from '@remix-run/react';\nimport * as _typedjson from './typedjson';\nexport const typedjson = (data, init = {}) => {\n    let responseInit = typeof init === 'number' ? { status: init } : init;\n    let headers = new Headers(responseInit.headers);\n    if (!headers.has('Content-Type')) {\n        headers.set('Content-Type', 'application/json; charset=utf-8');\n    }\n    return new Response(stringifyRemix(data), {\n        ...responseInit,\n        headers,\n    });\n};\nexport function useTypedLoaderData() {\n    const data = useLoaderData();\n    return deserializeRemix(data);\n}\nexport function useTypedActionData() {\n    const data = useActionData();\n    return deserializeRemix(data);\n}\nexport function useTypedFetcher() {\n    const fetcher = useFetcher();\n    if (fetcher.data) {\n        const newData = deserializeRemix(fetcher.data);\n        fetcher.data = newData ?? undefined;\n    }\n    return fetcher;\n}\nexport function useTypedRouteLoaderData(id) {\n    const match = useMatches().find(match => match.id === id);\n    if (!match)\n        return undefined;\n    return deserializeRemix(match.data);\n}\nexport function stringifyRemix(data) {\n    // prevent double JSON stringification\n    let { json, meta } = _typedjson.serialize(data);\n    if (json && meta) {\n        if (json.startsWith('{')) {\n            json = `${json.substring(0, json.length - 1)},\\\"__meta__\\\":${JSON.stringify(meta)}}`;\n        }\n        else if (json.startsWith('[')) {\n            json = `{\"__obj__\":${json},\"__meta__\":${JSON.stringify(meta)}}`;\n        }\n    }\n    return json;\n}\nexport function deserializeRemix(data) {\n    if (!data)\n        return data;\n    if (data.__obj__) {\n        // handle arrays wrapped in an object\n        return data.__meta__\n            ? _typedjson.applyMeta(data.__obj__, data.__meta__)\n            : data.__obj__;\n    }\n    else if (data.__meta__) {\n        // handle object with __meta__ key\n        // remove before applying meta\n        const meta = data.__meta__;\n        delete data.__meta__;\n        return _typedjson.applyMeta(data, meta);\n    }\n    return data;\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n *\n * @see https://remix.run/api/remix#redirect\n */\nexport const redirect = (url, init = 302) => {\n    let responseInit = init;\n    if (typeof responseInit === 'number') {\n        responseInit = { status: responseInit };\n    }\n    else if (typeof responseInit.status === 'undefined') {\n        responseInit.status = 302;\n    }\n    let headers = new Headers(responseInit.headers);\n    headers.set('Location', url);\n    return new Response(null, {\n        ...responseInit,\n        headers,\n    });\n};\n", "import { useEffect, useState } from \"react\";\n/**\n * Subscribe to an event source and return the latest event.\n * @param url The URL of the event source to connect to\n * @param options The options to pass to the EventSource constructor\n * @returns The last event received from the server\n */\nexport function useEventSource(url, { event = \"message\", init } = {}) {\n    const [data, setData] = useState(null);\n    useEffect(() => {\n        const eventSource = new EventSource(url, init);\n        eventSource.addEventListener(event !== null && event !== void 0 ? event : \"message\", handler);\n        // rest data if dependencies change\n        setData(null);\n        function handler(event) {\n            setData(event.data || \"UNKNOWN_EVENT_DATA\");\n        }\n        return () => {\n            eventSource.removeEventListener(event !== null && event !== void 0 ? event : \"message\", handler);\n            eventSource.close();\n        };\n    }, [url, event, init]);\n    return data;\n}\n", "import { typedjson, useTypedLoaderData } from 'remix-typedjson'\nimport { type LoaderArgs } from '@remix-run/node'\nimport { useEventSource } from 'remix-utils'\nimport {\n  Container,\n  Box,\n  Heading,\n  Stack,\n  HStack,\n  FormControl,\n  Input,\n  Link,\n  Button,\n} from '@chakra-ui/react'\nimport nl2br from 'react-nl2br'\nimport { LoginPane } from '~/components/LoginPane'\n\nexport const loader = async ({ request }: LoaderArgs) => {\n  return typedjson({ time: new Date().toString() })\n}\n\nexport default function Index() {\n  const loaderData = useTypedLoaderData<{ time: string }>()\n  const result =\n    useEventSource('/sse/time', { event: 'time' }) ?? loaderData.time\n\n  return (\n    <>\n      <Container\n        maxW=\"container.md\"\n        display=\"grid\"\n        gridTemplateRows=\"auto auto 1fr auto\"\n        h=\"100vh\"\n      >\n        <LoginPane py=\"2\" />\n\n        <Box>\n          <Heading py=\"16\" textAlign=\"center\">\n            Nickname GPT\n          </Heading>\n        </Box>\n\n        <Box h=\"full\" p=\"2\">\n          <Stack spacing=\"16\">\n            <form noValidate autoComplete=\"off\">\n              <FormControl id=\"input\">\n                <HStack>\n                  <Input\n                    autoFocus\n                    placeholder=\"\u3042\u306A\u305F\u306E\u540D\u524D\u3001\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u3001ID \u306A\u3069\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\"\n                  />\n                  <Button type=\"submit\" colorScheme=\"blue\">\n                    Submit\n                  </Button>\n                </HStack>\n              </FormControl>\n            </form>\n\n            <Box>\n              {false\n                ? 'Loading...'\n                : result === ''\n                ? 'AI \u304C\u3042\u306A\u305F\u306E Email \u3084 ID \u304B\u3089\u3001\u304B\u3063\u3053\u3044\u3044\u30CB\u30C3\u30AF\u30CD\u30FC\u30E0\u3092\u8003\u3048\u3066\u304F\u308C\u307E\u3059\u3002\u5165\u529B\u3057\u3066 Submit \u3057\u3066\u304F\u3060\u3055\u3044\u3002\u5165\u529B\u3055\u308C\u305F\u30C7\u30FC\u30BF\u306F\u3069\u3053\u306B\u3082\u4E00\u5207\u4FDD\u5B58\u3055\u308C\u307E\u305B\u3093\u3002'\n                : nl2br(result)}\n            </Box>\n          </Stack>\n        </Box>\n\n        <Box textAlign=\"center\" p=\"2\">\n          <Box>\n            Copyright &copy;{' '}\n            <Link href=\"https://twitter.com/techtalkjp\" color=\"blue.500\">\n              coji\n            </Link>{' '}\n          </Box>\n          <Box>\n            <Link href=\"https://github.com/coji/nickname-gpt\" color=\"blue.500\">\n              GitHub\n            </Link>\n          </Box>\n        </Box>\n      </Container>\n    </>\n  )\n}\n", "import type { StackProps } from '@chakra-ui/react'\nimport { Box, Button, Stack } from '@chakra-ui/react'\n\nexport const LoginPane = (props: StackProps) => {\n  // if (status === 'loading')\n  //   return (\n  //     <Stack\n  //       direction=\"row\"\n  //       justify=\"end\"\n  //       align=\"center\"\n  //       fontSize=\"sm\"\n  //       color=\"gray.500\"\n  //       {...props}\n  //     >\n  //       <Button isLoading={true} size=\"sm\" variant=\"outline\"></Button>\n  //     </Stack>\n  //   )\n\n  return (\n    <Stack\n      direction=\"row\"\n      justify=\"end\"\n      align=\"center\"\n      fontSize=\"sm\"\n      color=\"gray.500\"\n      {...props}\n    >\n      {/* <>\n        <Box>Signed in as {session.user.email} </Box>\n        <Button size=\"sm\" variant=\"outline\" onClick={() => signOut()}>\n          Sign out\n        </Button>\n      </> */}\n      <>\n        <Button size=\"sm\" variant=\"outline\">\n          Sign in\n        </Button>\n      </>\n    </Stack>\n  )\n}\n"],
  "mappings": "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",
  "names": ["data", "import_react", "event", "import_jsx_dev_runtime", "nl2br"]
}
